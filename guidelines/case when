---

# ðŸ“Œ Fiche pratique â€“ CASE WHEN

## ðŸ”¹ DÃ©finition

`CASE WHEN` permet dâ€™ajouter des conditions dans une requÃªte SQL.
ðŸ‘‰ Câ€™est lâ€™Ã©quivalent dâ€™un **if / elif / else** en programmation.
TrÃ¨s utile pour crÃ©er des colonnes calculÃ©es ou appliquer des rÃ¨gles de catÃ©gorisation.

---

## ðŸ”¹ Syntaxe SQL

```sql
CASE
    WHEN condition1 THEN valeur1
    WHEN condition2 THEN valeur2
    ...
    ELSE valeur_par_defaut
END
```

---

## ðŸ”¹ Exemple SQL

Supposons une table `ventes` avec une colonne `montant` :

```sql
SELECT montant,
       CASE
           WHEN montant < 50 THEN 'Petit achat'
           WHEN montant BETWEEN 50 AND 200 THEN 'Moyen achat'
           ELSE 'Gros achat'
       END AS categorie
FROM ventes;
```

ðŸ“Š RÃ©sultat : ajoute une colonne `categorie` selon le montant.

---

## ðŸ”¹ Ã‰quivalent en Python (pandas)

```python
import pandas as pd

# Exemple DataFrame
ventes = pd.DataFrame({"montant": [20, 75, 300]})

# Equivalent CASE WHEN avec numpy.select
import numpy as np

conditions = [
    ventes["montant"] < 50,
    ventes["montant"].between(50, 200),
]
valeurs = ["Petit achat", "Moyen achat"]

ventes["categorie"] = np.select(conditions, valeurs, default="Gros achat")

print(ventes)
```

ðŸ“Š RÃ©sultat : ajoute une colonne "categorie" comme en SQL.

---

âœ… **Ã€ retenir** :

* `CASE WHEN` = conditions dans une requÃªte.
* Super pratique pour transformer, classifier, crÃ©er des colonnes.
* En Python â†’ `numpy.select` ou `np.where` pour reproduire le mÃªme effet.

---


## üß≠ Plan d‚Äôapprentissage SQL

### 1. Bases fondamentales

* Qu‚Äôest-ce qu‚Äôune base de donn√©es relationnelle ?
* Tables, lignes (rows), colonnes (fields), sch√©ma.
* Diff√©rences entre **SQL** (langage) et **SGBD** (MySQL, PostgreSQL, SQLite, SQL Server, Oracle).
* Les requ√™tes simples :

  * `SELECT ... FROM`
  * Clauses `WHERE`, `ORDER BY`, `LIMIT`
  * Les alias (`AS`).

### 2. Filtrage et conditions

* Op√©rateurs logiques : `=`, `!=`, `<`, `>`, `BETWEEN`, `IN`, `LIKE`.
* Combinaisons avec `AND`, `OR`, `NOT`.
* Expressions conditionnelles (`CASE WHEN`).

### 3. Fonctions d‚Äôagr√©gation

* `COUNT()`, `SUM()`, `AVG()`, `MIN()`, `MAX()`.
* `GROUP BY` et `HAVING`.
* Diff√©rences entre `WHERE` et `HAVING`.

### 4. Relations entre tables

* Cl√©s primaires et √©trang√®res.
* Les **JOINS** :

  * `INNER JOIN`
  * `LEFT JOIN`
  * `RIGHT JOIN`
  * `FULL OUTER JOIN`
  * `CROSS JOIN`
* Cas d‚Äôusage des diff√©rents types de jointure.

### 5. Sous-requ√™tes

* `SELECT` dans un `WHERE`.
* Sous-requ√™tes corr√©l√©es.
* Expressions communes (`WITH` / CTE).

### 6. Mod√©lisation & normalisation

* R√®gles de normalisation (1NF, 2NF, 3NF, BCNF).
* Index, cl√©s uniques, contraintes (`CHECK`, `DEFAULT`, `NOT NULL`).
* Vues (`CREATE VIEW`).

### 7. SQL avanc√©

* Fen√™tres analytiques (`OVER`, `PARTITION BY`, `ROW_NUMBER()`, `RANK()`).
* Fonctions de texte (`CONCAT`, `SUBSTRING`, regex).
* Fonctions de date/temps.
* Transactions : `BEGIN`, `COMMIT`, `ROLLBACK`.
* Verrous, isolation (`READ COMMITTED`, `SERIALIZABLE`).
* Optimisation de requ√™tes (index, EXPLAIN).

### 8. Pratique en entreprise

* R√©diger des requ√™tes pour l‚Äôanalyse de donn√©es.
* Nettoyer des donn√©es avec SQL.
* Construire des **reportings**.
* Connexion avec Python (via `sqlalchemy`, `pandas`).
* S√©curit√© : injection SQL et bonnes pratiques.
